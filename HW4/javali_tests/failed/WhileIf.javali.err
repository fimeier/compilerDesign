Debug information for file: javali_tests/failed/WhileIf.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Main, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | | VarDecl (name: b, type: int)
| | | VarDecl (name: c, type: int)
| | | VarDecl (name: d, type: int)
| | | VarDecl (name: e, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | IntConst (value: 100)
| | | Assign ()
| | | | Var (name: b)
| | | | UnaryOp (operator: U_MINUS)
| | | | | IntConst (value: 50)
| | | WhileLoop ()
| | | | BinaryOp (operator: B_GREATER_THAN)
| | | | | Var (name: a)
| | | | | IntConst (value: 0)
| | | | Seq ()
| | | | | Assign ()
| | | | | | Var (name: a)
| | | | | | BinaryOp (operator: B_MINUS)
| | | | | | | Var (name: a)
| | | | | | | IntConst (value: 1)
| | | | | Assign ()
| | | | | | Var (name: b)
| | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | Var (name: b)
| | | | | | | IntConst (value: 1)
| | | | | IfElse ()
| | | | | | BinaryOp (operator: B_NOT_EQUAL)
| | | | | | | Var (name: b)
| | | | | | | IntConst (value: 0)
| | | | | | Seq ()
| | | | | | | Assign ()
| | | | | | | | Var (name: c)
| | | | | | | | IntConst (value: 5)
| | | | | | | Assign ()
| | | | | | | | Var (name: d)
| | | | | | | | IntConst (value: 10)
| | | | | | Seq ()
| | | | | | | Assign ()
| | | | | | | | Var (name: c)
| | | | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | | | IntConst (value: 25)
| | | | | | | | | Var (name: c)
| | | | | | | Assign ()
| | | | | | | | Var (name: e)
| | | | | | | | IntConst (value: 37)
| | | | | IfElse ()
| | | | | | BinaryOp (operator: B_LESS_OR_EQUAL)
| | | | | | | Var (name: a)
| | | | | | | IntConst (value: 0)
| | | | | | Seq ()
| | | | | | | ReturnStmt ()
| | | | | | Nop ()
Binary Op: ((a > 0))@128aa301 (%esi,%edi)
Binary Op: ((a - 1))@3570734a (%edi,%esi)
Binary Op: ((b + 1))@18a8668a (%esi,%edi)
Binary Op: ((b != 0))@d9cccd3 (%edi,%esi)

Test failed because an exception was thrown:
    null
Stack trace:
cd.ToDoException
	at cd.backend.codegen.StmtGenerator.jumpHelper(StmtGenerator.java:182)
	at cd.backend.codegen.StmtGenerator.ifElse(StmtGenerator.java:103)
	at cd.backend.codegen.StmtGenerator.ifElse(StmtGenerator.java:1)
	at cd.ir.Ast$IfElse.accept(Ast.java:535)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:1)
	at cd.ir.AstVisitor.visitChildren(AstVisitor.java:28)
	at cd.ir.AstVisitor.dflt(AstVisitor.java:37)
	at cd.ir.AstVisitor.seq(AstVisitor.java:100)
	at cd.ir.Ast$Seq.accept(Ast.java:677)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.jumpHelper(StmtGenerator.java:216)
	at cd.backend.codegen.StmtGenerator.whileLoop(StmtGenerator.java:111)
	at cd.backend.codegen.StmtGenerator.whileLoop(StmtGenerator.java:1)
	at cd.ir.Ast$WhileLoop.accept(Ast.java:624)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:1)
	at cd.ir.AstVisitor.visitChildren(AstVisitor.java:28)
	at cd.ir.AstVisitor.dflt(AstVisitor.java:37)
	at cd.ir.AstVisitor.seq(AstVisitor.java:100)
	at cd.ir.Ast$Seq.accept(Ast.java:677)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.methodDecl(StmtGenerator.java:91)
	at cd.backend.codegen.StmtGenerator.methodDecl(StmtGenerator.java:1)
	at cd.ir.Ast$MethodDecl.accept(Ast.java:720)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:1)
	at cd.ir.AstVisitor.visitChildren(AstVisitor.java:28)
	at cd.backend.codegen.StmtGenerator.classDecl(StmtGenerator.java:73)
	at cd.backend.codegen.StmtGenerator.classDecl(StmtGenerator.java:1)
	at cd.ir.Ast$ClassDecl.accept(Ast.java:755)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:49)
	at cd.backend.codegen.StmtGenerator.gen(StmtGenerator.java:43)
	at cd.backend.codegen.AstCodeGenerator.go(AstCodeGenerator.java:154)
	at cd.Main.generateCode(Main.java:127)
	at cd.test.AbstractTestAgainstFrozenReference.testCodeGenerator(AbstractTestAgainstFrozenReference.java:204)
	at cd.test.AbstractTestAgainstFrozenReference.test(AbstractTestAgainstFrozenReference.java:56)
	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:745)

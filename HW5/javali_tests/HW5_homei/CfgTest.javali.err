Debug information for file: javali_tests/HW5_homei/CfgTest.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Main, superClass: Object)
| VarDecl (name: A, type: int)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | Seq ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: print, returnType: void)
| | Seq ()
| | Seq ()
| | | ReturnStmt ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: print2, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | IntConst (value: 5)
| | | IfElse ()
| | | | BinaryOp (operator: B_NOT_EQUAL)
| | | | | Var (name: a)
| | | | | IntConst (value: 5)
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | Seq ()
| | | | | ReturnStmt ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: print3, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | IntConst (value: 5)
| | | IfElse ()
| | | | BinaryOp (operator: B_NOT_EQUAL)
| | | | | Var (name: a)
| | | | | IntConst (value: 5)
| | | | Seq ()
| | | | Seq ()
| | | | | ReturnStmt ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: print4, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | IntConst (value: 5)
| | | IfElse ()
| | | | BinaryOp (operator: B_NOT_EQUAL)
| | | | | Var (name: a)
| | | | | IntConst (value: 5)
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | | BuiltInWrite ()
| | | | | | Var (name: a)
| | | | Seq ()
| | | | | ReturnStmt ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: print5, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: a)
| | | | IntConst (value: 5)
| | | IfElse ()
| | | | BinaryOp (operator: B_NOT_EQUAL)
| | | | | Var (name: a)
| | | | | IntConst (value: 5)
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | | BuiltInWrite ()
| | | | | | Var (name: a)

Phase cfg failed because we expected to see:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0"
    ];
    M0_BB0 -> M0_BB1;
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "Main.print"
    M1_BB0 [
      shape="record"
      label="BB0|return"
    ];
    M1_BB0 -> M1_BB1;
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_2 {
    label = "Main.print2"
    M2_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M2_BB0 -> M2_BB2;
    M2_BB0 -> M2_BB3 [label="False"];
    M2_BB1 [
      shape="record"
      label="BB1"
    ];
    M2_BB2 [
      shape="record"
      label="BB2|return"
    ];
    M2_BB2 -> M2_BB1;
    M2_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M2_BB3 -> M2_BB1;
  }
  subgraph cluster_3 {
    label = "Main.print3"
    M3_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M3_BB0 -> M3_BB2;
    M3_BB0 -> M3_BB3 [label="False"];
    M3_BB1 [
      shape="record"
      label="BB1"
    ];
    M3_BB2 [
      shape="record"
      label="BB2"
    ];
    M3_BB2 -> M3_BB4;
    M3_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M3_BB3 -> M3_BB1;
    M3_BB4 [
      shape="record"
      label="BB4"
    ];
    M3_BB4 -> M3_BB1;
  }
  subgraph cluster_4 {
    label = "Main.print4"
    M4_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M4_BB0 -> M4_BB2;
    M4_BB0 -> M4_BB3 [label="False"];
    M4_BB1 [
      shape="record"
      label="BB1"
    ];
    M4_BB2 [
      shape="record"
      label="BB2|return"
    ];
    M4_BB2 -> M4_BB1;
    M4_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M4_BB3 -> M4_BB1;
  }
  subgraph cluster_5 {
    label = "Main.print5"
    M5_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M5_BB0 -> M5_BB2;
    M5_BB0 -> M5_BB3 [label="False"];
    M5_BB1 [
      shape="record"
      label="BB1"
    ];
    M5_BB2 [
      shape="record"
      label="BB2|return"
    ];
    M5_BB2 -> M5_BB1;
    M5_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M5_BB3 -> M5_BB1;
  }
}

But we actually saw:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0"
    ];
    M0_BB0 -> M0_BB1;
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_1 {
    label = "Main.print"
    M1_BB0 [
      shape="record"
      label="BB0|return"
    ];
    M1_BB0 -> M1_BB1;
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
  }
  subgraph cluster_2 {
    label = "Main.print2"
    M2_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M2_BB0 -> M2_BB2;
    M2_BB0 -> M2_BB3 [label="False"];
    M2_BB1 [
      shape="record"
      label="BB1"
    ];
    M2_BB2 [
      shape="record"
      label="BB2|return"
    ];
    M2_BB2 -> M2_BB1;
    M2_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M2_BB3 -> M2_BB1;
  }
  subgraph cluster_3 {
    label = "Main.print3"
    M3_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M3_BB0 -> M3_BB2;
    M3_BB0 -> M3_BB3 [label="False"];
    M3_BB1 [
      shape="record"
      label="BB1"
    ];
    M3_BB2 [
      shape="record"
      label="BB2"
    ];
    M3_BB2 -> M3_BB4;
    M3_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M3_BB3 -> M3_BB1;
    M3_BB4 [
      shape="record"
      label="BB4"
    ];
    M3_BB4 -> M3_BB1;
  }
  subgraph cluster_4 {
    label = "Main.print4"
    M4_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M4_BB0 -> M4_BB2;
    M4_BB0 -> M4_BB3 [label="False"];
    M4_BB1 [
      shape="record"
      label="BB1"
    ];
    M4_BB2 [
      shape="record"
      label="BB2|return|write(a)"
    ];
    M4_BB2 -> M4_BB1;
    M4_BB2 -> M4_BB4 [label="False"];
    M4_BB3 [
      shape="record"
      label="BB3|return"
    ];
    M4_BB3 -> M4_BB1;
    M4_BB4 [
      shape="record"
      label="BB4"
    ];
    M4_BB4 -> M4_BB1;
  }
  subgraph cluster_5 {
    label = "Main.print5"
    M5_BB0 [
      shape="record"
      label="BB0|a = 5|If: (a != 5)"
    ];
    M5_BB0 -> M5_BB2;
    M5_BB0 -> M5_BB3 [label="False"];
    M5_BB1 [
      shape="record"
      label="BB1"
    ];
    M5_BB2 [
      shape="record"
      label="BB2|return"
    ];
    M5_BB2 -> M5_BB1;
    M5_BB3 [
      shape="record"
      label="BB3|return|write(a)"
    ];
    M5_BB3 -> M5_BB1;
    M5_BB3 -> M5_BB4 [label="False"];
    M5_BB4 [
      shape="record"
      label="BB4"
    ];
    M5_BB4 -> M5_BB1;
  }
}

The difference is:
At line  92 /  92:
<       label="BB2|return"
>       label="BB2|return|write(a)"
At line  95 /  95:
>     M4_BB2 -> M4_BB4 [label="False"];
At line 100 / 101:
>     M4_BB4 [
>       shape="record"
>       label="BB4"
>     ];
>     M4_BB4 -> M4_BB1;
At line 120 / 126:
<       label="BB3|return"
>       label="BB3|return|write(a)"
At line 123 / 129:
>     M5_BB3 -> M5_BB4 [label="False"];
>     M5_BB4 [
>       shape="record"
>       label="BB4"
>     ];
>     M5_BB4 -> M5_BB1;
Line 125 / 137:


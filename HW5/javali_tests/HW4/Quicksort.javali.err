Debug information for file: javali_tests/HW4/Quicksort.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Record, superClass: Object)
| VarDecl (name: a, type: int)
| MethodDecl (argumentNames: [], argumentTypes: [], name: print, returnType: void)
| | Seq ()
| | Seq ()
| | | BuiltInWrite ()
| | | | Var (name: a)
| | | BuiltInWriteln ()
ClassDecl (name: Main, superClass: Object)
| VarDecl (name: a, type: Record[])
| VarDecl (name: i, type: int)
| MethodDecl (argumentNames: [r1, r2], argumentTypes: [Record, Record], name: swap, returnType: void)
| | Seq ()
| | | VarDecl (name: temp, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: temp)
| | | | Field (fieldName: a)
| | | | | Var (name: r1)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Var (name: r1)
| | | | Field (fieldName: a)
| | | | | Var (name: r2)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Var (name: r2)
| | | | Var (name: temp)
| MethodDecl (argumentNames: [left, right], argumentTypes: [int, int], name: sort, returnType: void)
| | Seq ()
| | | VarDecl (name: i, type: int)
| | | VarDecl (name: j, type: int)
| | | VarDecl (name: m, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: m)
| | | | BinaryOp (operator: B_DIV)
| | | | | BinaryOp (operator: B_PLUS)
| | | | | | Field (fieldName: a)
| | | | | | | Index ()
| | | | | | | | Var (name: a)
| | | | | | | | Var (name: left)
| | | | | | Field (fieldName: a)
| | | | | | | Index ()
| | | | | | | | Var (name: a)
| | | | | | | | Var (name: right)
| | | | | IntConst (value: 2)
| | | Assign ()
| | | | Var (name: i)
| | | | Var (name: left)
| | | Assign ()
| | | | Var (name: j)
| | | | Var (name: right)
| | | WhileLoop ()
| | | | BinaryOp (operator: B_LESS_OR_EQUAL)
| | | | | Var (name: i)
| | | | | Var (name: j)
| | | | Seq ()
| | | | | WhileLoop ()
| | | | | | BinaryOp (operator: B_LESS_THAN)
| | | | | | | Field (fieldName: a)
| | | | | | | | Index ()
| | | | | | | | | Var (name: a)
| | | | | | | | | Var (name: i)
| | | | | | | Var (name: m)
| | | | | | Seq ()
| | | | | | | Assign ()
| | | | | | | | Var (name: i)
| | | | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | | | Var (name: i)
| | | | | | | | | IntConst (value: 1)
| | | | | WhileLoop ()
| | | | | | BinaryOp (operator: B_GREATER_THAN)
| | | | | | | Field (fieldName: a)
| | | | | | | | Index ()
| | | | | | | | | Var (name: a)
| | | | | | | | | Var (name: j)
| | | | | | | Var (name: m)
| | | | | | Seq ()
| | | | | | | Assign ()
| | | | | | | | Var (name: j)
| | | | | | | | BinaryOp (operator: B_MINUS)
| | | | | | | | | Var (name: j)
| | | | | | | | | IntConst (value: 1)
| | | | | IfElse ()
| | | | | | BinaryOp (operator: B_LESS_OR_EQUAL)
| | | | | | | Var (name: i)
| | | | | | | Var (name: j)
| | | | | | Seq ()
| | | | | | | MethodCall ()
| | | | | | | | MethodCallExpr (methodName: swap)
| | | | | | | | | ThisRef ()
| | | | | | | | | Index ()
| | | | | | | | | | Var (name: a)
| | | | | | | | | | Var (name: i)
| | | | | | | | | Index ()
| | | | | | | | | | Var (name: a)
| | | | | | | | | | Var (name: j)
| | | | | | | Assign ()
| | | | | | | | Var (name: i)
| | | | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | | | Var (name: i)
| | | | | | | | | IntConst (value: 1)
| | | | | | | Assign ()
| | | | | | | | Var (name: j)
| | | | | | | | BinaryOp (operator: B_MINUS)
| | | | | | | | | Var (name: j)
| | | | | | | | | IntConst (value: 1)
| | | | | | Nop ()
| | | IfElse ()
| | | | BinaryOp (operator: B_LESS_THAN)
| | | | | Var (name: left)
| | | | | Var (name: j)
| | | | Seq ()
| | | | | MethodCall ()
| | | | | | MethodCallExpr (methodName: sort)
| | | | | | | ThisRef ()
| | | | | | | Var (name: left)
| | | | | | | Var (name: j)
| | | | Nop ()
| | | IfElse ()
| | | | BinaryOp (operator: B_LESS_THAN)
| | | | | Var (name: i)
| | | | | Var (name: right)
| | | | Seq ()
| | | | | MethodCall ()
| | | | | | MethodCallExpr (methodName: sort)
| | | | | | | ThisRef ()
| | | | | | | Var (name: i)
| | | | | | | Var (name: right)
| | | | Nop ()
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: SIZE, type: int)
| | | VarDecl (name: j, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: SIZE)
| | | | IntConst (value: 5)
| | | Assign ()
| | | | Var (name: a)
| | | | NewArray (typeName: Record[])
| | | | | Var (name: SIZE)
| | | Assign ()
| | | | Var (name: j)
| | | | IntConst (value: 0)
| | | WhileLoop ()
| | | | BinaryOp (operator: B_LESS_THAN)
| | | | | Var (name: j)
| | | | | Var (name: SIZE)
| | | | Seq ()
| | | | | Assign ()
| | | | | | Index ()
| | | | | | | Var (name: a)
| | | | | | | Var (name: j)
| | | | | | NewObject (typeName: Record)
| | | | | Assign ()
| | | | | | Var (name: j)
| | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | Var (name: j)
| | | | | | | IntConst (value: 1)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Index ()
| | | | | | Var (name: a)
| | | | | | IntConst (value: 0)
| | | | IntConst (value: 5)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Index ()
| | | | | | Var (name: a)
| | | | | | IntConst (value: 1)
| | | | IntConst (value: 3)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Index ()
| | | | | | Var (name: a)
| | | | | | IntConst (value: 2)
| | | | IntConst (value: 1)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Index ()
| | | | | | Var (name: a)
| | | | | | IntConst (value: 3)
| | | | IntConst (value: 4)
| | | Assign ()
| | | | Field (fieldName: a)
| | | | | Index ()
| | | | | | Var (name: a)
| | | | | | IntConst (value: 4)
| | | | IntConst (value: 2)
| | | Assign ()
| | | | Var (name: j)
| | | | IntConst (value: 0)
| | | WhileLoop ()
| | | | BinaryOp (operator: B_LESS_THAN)
| | | | | Var (name: j)
| | | | | Var (name: SIZE)
| | | | Seq ()
| | | | | MethodCall ()
| | | | | | MethodCallExpr (methodName: print)
| | | | | | | Index ()
| | | | | | | | Var (name: a)
| | | | | | | | Var (name: j)
| | | | | Assign ()
| | | | | | Var (name: j)
| | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | Var (name: j)
| | | | | | | IntConst (value: 1)
| | | BuiltInWriteln ()
| | | MethodCall ()
| | | | MethodCallExpr (methodName: sort)
| | | | | ThisRef ()
| | | | | IntConst (value: 0)
| | | | | IntConst (value: 4)
| | | Assign ()
| | | | Var (name: j)
| | | | IntConst (value: 0)
| | | WhileLoop ()
| | | | BinaryOp (operator: B_LESS_THAN)
| | | | | Var (name: j)
| | | | | Var (name: SIZE)
| | | | Seq ()
| | | | | MethodCall ()
| | | | | | MethodCallExpr (methodName: print)
| | | | | | | Index ()
| | | | | | | | Var (name: a)
| | | | | | | | Var (name: j)
| | | | | Assign ()
| | | | | | Var (name: j)
| | | | | | BinaryOp (operator: B_PLUS)
| | | | | | | Var (name: j)
| | | | | | | IntConst (value: 1)
| | | BuiltInWriteln ()

Phase nn failed because we expected to see:
Main.main
  BB0 out: []
    SIZE = 5: []
    this.a = new Record[][SIZE]: []
    j = 0: []
  BB1 out: []
  BB2 out: []
    (j < SIZE): []
  BB3 out: []
    this.a[j] = new Record(): []
    j = (j + 1): []
  BB4 out: []
    this.a[0].a = 5: []
    this.a[1].a = 3: []
    this.a[2].a = 1: []
    this.a[3].a = 4: []
    this.a[4].a = 2: []
    j = 0: []
  BB5 out: []
    (j < SIZE): []
  BB6 out: []
    this.a[j].print(...): []
    j = (j + 1): []
  BB7 out: []
    writeln(): []
    this.sort(...): []
    j = 0: []
  BB8 out: []
    (j < SIZE): []
  BB9 out: []
    this.a[j].print(...): []
    j = (j + 1): []
  BB10 out: []
    writeln(): []


Main.sort
  BB0 out: []
    m = ((this.a[left].a + this.a[right].a) / 2): []
    i = left: []
    j = right: []
  BB1 out: []
  BB2 out: []
    (i <= j): []
  BB3 out: []
  BB4 out: []
    (left < j): []
  BB5 out: []
    (this.a[i].a < m): []
  BB6 out: []
    i = (i + 1): []
  BB7 out: []
  BB8 out: []
    (this.a[j].a > m): []
  BB9 out: []
    j = (j - 1): []
  BB10 out: []
    (i <= j): []
  BB11 out: []
    this.swap(...): []
    i = (i + 1): []
    j = (j - 1): []
  BB12 out: []
    nop: []
  BB13 out: []
  BB14 out: []
    this.sort(...): []
  BB15 out: []
    nop: []
  BB16 out: []
    (i < right): []
  BB17 out: []
    this.sort(...): []
  BB18 out: []
    nop: []
  BB19 out: []


Main.swap
  BB0 out: [r1, r2]
    temp = r1.a: []
    r1.a = r2.a: [r1]
    r2.a = temp: [r1, r2]
  BB1 out: [r1, r2]


Record.print
  BB0 out: []
    write(this.a): []
    writeln(): []
  BB1 out: []



But we actually saw:
Main.main
  BB0 out: []
    SIZE = 5: []
    this.a = new Record[][SIZE]: []
    j = 0: []
  BB1 out: []
  BB2 out: []
    (j < SIZE): []
  BB3 out: []
    this.a[j] = new Record(): []
    j = (j + 1): []
  BB4 out: []
    this.a[0].a = 5: []
    this.a[1].a = 3: []
    this.a[2].a = 1: []
    this.a[3].a = 4: []
    this.a[4].a = 2: []
    j = 0: []
  BB5 out: []
    (j < SIZE): []
  BB6 out: []
    this.a[j].print(...): []
    j = (j + 1): []
  BB7 out: []
    writeln(): []
    this.sort(...): []
    j = 0: []
  BB8 out: []
    (j < SIZE): []
  BB9 out: []
    this.a[j].print(...): []
    j = (j + 1): []
  BB10 out: []
    writeln(): []


Main.sort
  BB0 out: []
    m = ((this.a[left].a + this.a[right].a) / 2): []
    i = left: []
    j = right: []
  BB1 out: []
  BB2 out: []
    (i <= j): []
  BB3 out: []
  BB4 out: []
    (left < j): []
  BB5 out: []
    (this.a[i].a < m): []
  BB6 out: []
    i = (i + 1): []
  BB7 out: []
  BB8 out: []
    (this.a[j].a > m): []
  BB9 out: []
    j = (j - 1): []
  BB10 out: []
    (i <= j): []
  BB11 out: []
    this.swap(...): []
    i = (i + 1): []
    j = (j - 1): []
  BB12 out: []
    nop: []
  BB13 out: []
  BB14 out: []
    this.sort(...): []
  BB15 out: []
    nop: []
  BB16 out: []
    (i < right): []
  BB17 out: []
    this.sort(...): []
  BB18 out: []
    nop: []
  BB19 out: []


Main.swap
  BB0 out: []
    temp = r1.a: []
    r1.a = r2.a: []
    r2.a = temp: []
  BB1 out: []


Record.print
  BB0 out: []
    write(this.a): []
    writeln(): []
  BB1 out: []



The difference is:
At line  80 /  80:
<   BB0 out: [r1, r2]
>   BB0 out: []
At line  82 /  82:
<     r1.a = r2.a: [r1]
<     r2.a = temp: [r1, r2]
<   BB1 out: [r1, r2]
>     r1.a = r2.a: []
>     r2.a = temp: []
>   BB1 out: []
Line  92 /  92:


Debug information for file: javali_tests/not ours/old/A4_team/booleanParam.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Main, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: a, type: int)
| | Seq ()
| | | IfElse ()
| | | | BinaryOp (operator: B_OR)
| | | | | BinaryOp (operator: B_AND)
| | | | | | BooleanConst (value: true)
| | | | | | BooleanConst (value: false)
| | | | | BooleanConst (value: true)
| | | | Seq ()
| | | | | BuiltInWrite ()
| | | | | | IntConst (value: 0)
| | | | Seq ()
| | | | | BuiltInWrite ()
| | | | | | IntConst (value: 1)
| | | Assign ()
| | | | Var (name: a)
| | | | MethodCallExpr (methodName: foo)
| | | | | ThisRef ()
| | | | | BinaryOp (operator: B_OR)
| | | | | | BinaryOp (operator: B_AND)
| | | | | | | BooleanConst (value: true)
| | | | | | | BooleanConst (value: false)
| | | | | | BooleanConst (value: true)
| | | | | BinaryOp (operator: B_AND)
| | | | | | BooleanConst (value: true)
| | | | | | BooleanConst (value: false)
| | | BuiltInWrite ()
| | | | Var (name: a)
| MethodDecl (argumentNames: [a, b], argumentTypes: [boolean, boolean], name: foo, returnType: int)
| | Seq ()
| | Seq ()
| | | IfElse ()
| | | | BinaryOp (operator: B_AND)
| | | | | Var (name: a)
| | | | | Var (name: b)
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | | | IntConst (value: 3)
| | | | Seq ()
| | | | | ReturnStmt ()
| | | | | | IntConst (value: 5)

Phase cfg failed because we expected to see:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0|If: ((true && false) \|\| true)"
    ];
    M0_BB0 -> M0_BB2;
    M0_BB0 -> M0_BB3 [label="False"];
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
    M0_BB2 [
      shape="record"
      label="BB2|write(0)"
    ];
    M0_BB2 -> M0_BB4;
    M0_BB3 [
      shape="record"
      label="BB3|write(1)"
    ];
    M0_BB3 -> M0_BB4;
    M0_BB4 [
      shape="record"
      label="BB4|a = this.foo(...)|write(a)"
    ];
    M0_BB4 -> M0_BB1;
  }
  subgraph cluster_1 {
    label = "Main.foo"
    M1_BB0 [
      shape="record"
      label="BB0|If: (a && b)"
    ];
    M1_BB0 -> M1_BB2;
    M1_BB0 -> M1_BB3 [label="False"];
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
    M1_BB2 [
      shape="record"
      label="BB2|return 3"
    ];
    M1_BB2 -> M1_BB1;
    M1_BB3 [
      shape="record"
      label="BB3|return 5"
    ];
    M1_BB3 -> M1_BB1;
  }
}

But we actually saw:
digraph G {
  graph [ rankdir = "LR" ];
  subgraph cluster_0 {
    label = "Main.main"
    M0_BB0 [
      shape="record"
      label="BB0|If: ((true && false) \|\| true)"
    ];
    M0_BB0 -> M0_BB2;
    M0_BB0 -> M0_BB3 [label="False"];
    M0_BB1 [
      shape="record"
      label="BB1"
    ];
    M0_BB2 [
      shape="record"
      label="BB2|write(0)"
    ];
    M0_BB2 -> M0_BB4;
    M0_BB3 [
      shape="record"
      label="BB3|write(1)"
    ];
    M0_BB3 -> M0_BB4;
    M0_BB4 [
      shape="record"
      label="BB4|a = this.foo(...)|write(a)"
    ];
    M0_BB4 -> M0_BB1;
  }
  subgraph cluster_1 {
    label = "Main.foo"
    M1_BB0 [
      shape="record"
      label="BB0|If: (a && b)"
    ];
    M1_BB0 -> M1_BB2;
    M1_BB0 -> M1_BB3 [label="False"];
    M1_BB1 [
      shape="record"
      label="BB1"
    ];
    M1_BB2 [
      shape="record"
      label="BB2|return 3"
    ];
    M1_BB2 -> M1_BB1;
    M1_BB3 [
      shape="record"
      label="BB3|return 5"
    ];
    M1_BB3 -> M1_BB1;
    M1_BB4 [
      shape="record"
      label="BB4"
    ];
    M1_BB4 -> M1_BB1;
  }
}

The difference is:
At line  53 /  53:
>     M1_BB4 [
>       shape="record"
>       label="BB4"
>     ];
>     M1_BB4 -> M1_BB1;
Line  55 /  60:


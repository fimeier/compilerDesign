Board.Board
  BB0 out: []
    this.SquareMatrix(...): []
  BB1 out: []


Board.columnComplete
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < 3): []
  BB3 out: []
    (this.get(...) != player): []
  BB4 out: []
    return true: []
  BB5 out: []
    return false: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Board.diagonal1Complete
  BB0 out: []
    return (((this.get(...) == player) && (this.get(...) == player)) && (this.get(...) == player)): []
  BB1 out: []


Board.diagonal2Complete
  BB0 out: []
    return (((this.get(...) == player) && (this.get(...) == player)) && (this.get(...) == player)): []
  BB1 out: []


Board.full
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < 3): []
  BB3 out: []
    j = 0: []
  BB4 out: []
    return true: []
  BB5 out: []
    (j < 3): []
  BB6 out: []
    (0 == this.get(...)): []
  BB7 out: []
    i = (i + 1): []
  BB8 out: []
    return false: []
  BB9 out: []
    nop: []
  BB10 out: []
    j = (j + 1): []


Board.hasWon
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < 3): []
  BB3 out: []
    this.rowComplete(...): []
  BB4 out: []
    i = 0: []
  BB5 out: []
    return true: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []
  BB8 out: []
    (i < 3): []
  BB9 out: []
    this.columnComplete(...): []
  BB10 out: []
    return (this.diagonal1Complete(...) || this.diagonal2Complete(...)): []
  BB11 out: []
    return true: []
  BB12 out: []
    nop: []
  BB13 out: []
    i = (i + 1): []


Board.rowComplete
  BB0 out: []
    j = 0: []
  BB1 out: []
  BB2 out: []
    (j < 3): []
  BB3 out: []
    (this.get(...) != player): []
  BB4 out: []
    return true: []
  BB5 out: []
    return false: []
  BB6 out: []
    nop: []
  BB7 out: []
    j = (j + 1): []


Board.set
  BB0 out: []
    (0 == this.get(...)): []
  BB1 out: []
  BB2 out: []
    this.vectors[i].set(...): []
  BB3 out: []
    this.vectors[i].set(...): []
  BB4 out: []


Main.main
  BB0 out: []
    this.b = new Board(): []
    this.b.Board(...): []
    n = read(): []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < n): []
  BB3 out: []
    this.runGame(...): []
    this.b.print(...): []
    i = (i + 1): []
  BB4 out: []


Main.runGame
  BB0 out: []
    this.b.fill(...): []
    this.b.print(...): []
    winner = 0: []
    currentPlayer = 1: []
  BB1 out: []
  BB2 out: []
    (((0 == winner) && !(this.b.full(...))) && !(this.b.contains(...))): []
  BB3 out: []
    this.runPlayer(...): []
  BB4 out: []
    (1 == winner): []
  BB5 out: []
    winner = currentPlayer: []
  BB6 out: []
    nop: []
  BB7 out: []
    currentPlayer = (3 - currentPlayer): []
  BB8 out: []
    this.b.fill(...): []
  BB9 out: []
    (2 == winner): []
  BB10 out: []
    this.b.fill(...): []
  BB11 out: []
    this.b.contains(...): []
  BB12 out: []
    this.b.fill(...): []
  BB13 out: []
    this.b.fill(...): []
  BB14 out: []
  BB15 out: []
  BB16 out: []


Main.runPlayer
  BB0 out: []
    m = this.b: []
    n = 3: []
    pos = read(): []
    pos = (pos - 1): []
    row = (pos / n): []
    column = (pos % n): []
    (1 == player): []
  BB1 out: []
  BB2 out: []
    this.b.set(...): []
  BB3 out: [m]
    m.set(...): []
  BB4 out: []
    this.b = (Board)(m): []
    this.b.print(...): []
    return this.b.hasWon(...): []


Matrix.Matrix
  BB0 out: []
    this.m = m: []
    this.vectors = new Vector[][n]: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < m): []
  BB3 out: [temp]
    temp = new Vector(): []
    temp.Vector(...): [temp]
    this.vectors[i] = temp: [temp]
    i = (i + 1): [temp]
  BB4 out: []


Matrix.columns
  BB0 out: []
    return this.vectors[0].n: []
  BB1 out: []


Matrix.compactOK
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.m): []
  BB3 out: []
    !(this.vectors[i].compactOK(...)): []
  BB4 out: []
    return true: []
  BB5 out: []
    return false: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Matrix.contains
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.m): []
  BB3 out: []
    this.vectors[i].contains(...): []
  BB4 out: []
    return false: []
  BB5 out: []
    return true: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Matrix.fill
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.m): []
  BB3 out: []
    this.vectors[i].fill(...): []
    i = (i + 1): []
  BB4 out: []


Matrix.get
  BB0 out: []
    return this.vectors[i].get(...): []
  BB1 out: []


Matrix.mult
  BB0 out: []
    ((null == A) || (null == B)): []
  BB1 out: []
  BB2 out: []
    return null: []
  BB3 out: []
    nop: []
  BB4 out: [A, B]
    ((this.rows(...) != A.rows(...)) || (this.columns(...) != B.columns(...))): []
  BB5 out: [A, B]
    return null: [A, B]
  BB6 out: [A, B]
    nop: [A, B]
  BB7 out: [A, B]
    (A.columns(...) != B.rows(...)): [A, B]
  BB8 out: [A, B]
    return null: [A, B]
  BB9 out: [A, B]
    nop: [A, B]
  BB10 out: [A, B]
    i = 0: [A, B]
  BB11 out: [A, B]
    (i < this.rows(...)): [A, B]
  BB12 out: [A, B]
    j = 0: [A, B]
  BB13 out: [A, B]
    return this: [A, B]
  BB14 out: [A, B]
    (j < this.columns(...)): [A, B]
  BB15 out: [A, B]
    sum = 0: [A, B]
    k = 0: [A, B]
  BB16 out: [A, B]
    i = (i + 1): [A, B]
  BB17 out: [A, B]
    (k < this.columns(...)): [A, B]
  BB18 out: [A, B]
    sum = (sum + (A.get(...) * B.get(...))): [A, B]
    k = (k + 1): [A, B]
  BB19 out: [A, B]
    this.set(...): [A, B]
    j = (j + 1): [A, B]


Matrix.print
  BB0 out: []
    compact = this.compactOK(...): []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.m): []
  BB3 out: []
    this.vectors[i].print2(...): []
    i = (i + 1): []
  BB4 out: []
    writeln(): []


Matrix.rows
  BB0 out: []
    return this.m: []
  BB1 out: []


Matrix.set
  BB0 out: []
    this.vectors[i].set(...): []
  BB1 out: []


SquareMatrix.SquareMatrix
  BB0 out: []
    this.Matrix(...): []
  BB1 out: []


SquareMatrix.fillIdentity
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.m): []
  BB3 out: []
    this.set(...): []
    i = (i + 1): []
  BB4 out: []


Vector.Vector
  BB0 out: []
    this.n = n: []
    this.v = new int[][n]: []
    this.fill(...): []
  BB1 out: []


Vector.compactOK
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.n): []
  BB3 out: []
    value = this.v[i]: []
    ((value < 0) || (9 < value)): []
  BB4 out: []
    return true: []
  BB5 out: []
    return false: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Vector.contains
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.n): []
  BB3 out: []
    (this.v[i] == value): []
  BB4 out: []
    return false: []
  BB5 out: []
    return true: []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Vector.fill
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.n): []
  BB3 out: []
    this.v[i] = value: []
    i = (i + 1): []
  BB4 out: []


Vector.get
  BB0 out: []
    return this.v[i]: []
  BB1 out: []


Vector.print
  BB0 out: []
    this.print2(...): []
  BB1 out: []


Vector.print2
  BB0 out: []
    nc = !(compact): []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < this.n): []
  BB3 out: []
    write(this.v[i]): []
    nc: []
  BB4 out: []
    writeln(): []
  BB5 out: []
    writeln(): []
  BB6 out: []
    nop: []
  BB7 out: []
    i = (i + 1): []


Vector.set
  BB0 out: []
    this.v[i] = value: []
  BB1 out: []



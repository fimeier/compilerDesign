ActionLambda.apply
  BB0 out: []
    return 0: []
  BB1 out: []


CmpLambda.apply
  BB0 out: []
    return 0: []
  BB1 out: []


CountAction.apply
  BB0 out: []
    return 1: []
  BB1 out: []


CountReduction.apply
  BB0 out: []
    return ((leftReturn + myReturn) + rightReturn): []
  BB1 out: []


DepthAction.apply
  BB0 out: []
    return 1: []
  BB1 out: []


DepthReduction.apply
  BB0 out: []
    (leftReturn > rightReturn): []
  BB1 out: []
  BB2 out: []
    return (leftReturn + myReturn): []
  BB3 out: []
    return (rightReturn + myReturn): []


Greater.apply
  BB0 out: []
    (a > b): []
  BB1 out: []
  BB2 out: []
    return -(1): []
  BB3 out: []
    nop: []
  BB4 out: []
    (a < b): []
  BB5 out: []
    return 1: []
  BB6 out: []
    nop: []
  BB7 out: []
    return 0: []


Less.apply
  BB0 out: []
    (a < b): []
  BB1 out: []
  BB2 out: []
    return -(1): []
  BB3 out: []
    nop: []
  BB4 out: []
    (a > b): []
  BB5 out: []
    return 1: []
  BB6 out: []
    nop: []
  BB7 out: []
    return 0: []


Main.fill
  BB0 out: []
    i = 0: []
  BB1 out: []
  BB2 out: []
    (i < n): []
  BB3 out: [t]
    key = this.r.next(...): []
    value = key: []
    t.add(...): []
    i = (i + 1): [t]
  BB4 out: []


Main.init
  BB0 out: [cmpOp]
    this.r = new Random(): []
    this.r.Random(...): []
    cmpOp = new Less(): []
    this.t1 = new Tree(): [cmpOp]
    this.t1.Tree(...): [cmpOp]
    cmpOp = new Greater(): [cmpOp]
    this.t2 = new Tree(): [cmpOp]
    this.t2.Tree(...): [cmpOp]
  BB1 out: [cmpOp]


Main.main
  BB0 out: []
    this.init(...): []
    this.fill(...): []
    this.fill(...): []
    this.print(...): []
    this.print(...): []
  BB1 out: []


Main.print
  BB0 out: [t]
    write(t.getCount(...)): []
    writeln(): [t]
    write(t.getDepth(...)): [t]
    writeln(): [t]
    t.printInOrder(...): [t]
  BB1 out: [t]


Node.Node
  BB0 out: []
    this.cmpOp = cmpOp: []
    this.left = null: []
    this.right = null: []
    this.key = key: []
    this.value = value: []
  BB1 out: []


Node.add
  BB0 out: [n]
    cmp = n.compare(...): []
    (cmp == 0): [n]
  BB1 out: [n]
  BB2 out: [n]
    this.value = n.getValue(...): [n]
    return: [n]
  BB3 out: [n]
    nop: [n]
  BB4 out: [n]
    (cmp < 0): [n]
  BB5 out: [n]
    (this.left == null): [n]
  BB6 out: [n]
    (this.right == null): [n]
  BB7 out: [n]
    this.left = n: [n]
  BB8 out: [n]
    this.left.add(...): [n]
  BB9 out: [n]
  BB10 out: [n]
    this.right = n: [n]
  BB11 out: [n]
    this.right.add(...): [n]
  BB12 out: [n]
  BB13 out: [n]


Node.compare
  BB0 out: [other]
    return this.cmpOp.apply(...): []
  BB1 out: [other]


Node.getKey
  BB0 out: []
    return this.key: []
  BB1 out: []


Node.getLeft
  BB0 out: []
    return this.left: []
  BB1 out: []


Node.getRight
  BB0 out: []
    return this.right: []
  BB1 out: []


Node.getValue
  BB0 out: []
    return this.value: []
  BB1 out: []


Node.runInOrder
  BB0 out: []
    (this.left != null): []
  BB1 out: [action, reduce]
  BB2 out: []
    l = this.left.runInOrder(...): []
  BB3 out: []
    l = 0: []
  BB4 out: [action]
    m = action.apply(...): []
    (this.right != null): [action]
  BB5 out: [action]
    r = this.right.runInOrder(...): [action]
  BB6 out: [action]
    r = 0: [action]
  BB7 out: [action, reduce]
    return reduce.apply(...): [action]


Node.runPostOrder
  BB0 out: []
    (this.left != null): []
  BB1 out: [action, reduce]
  BB2 out: []
    l = this.left.runPreOrder(...): []
  BB3 out: []
    l = 0: []
  BB4 out: []
    (this.right != null): []
  BB5 out: []
    r = this.right.runPreOrder(...): []
  BB6 out: []
    r = 0: []
  BB7 out: [action, reduce]
    m = action.apply(...): []
    return reduce.apply(...): [action]


Node.runPreOrder
  BB0 out: [action]
    m = action.apply(...): []
    (this.left != null): [action]
  BB1 out: [action, reduce]
  BB2 out: [action]
    l = this.left.runPreOrder(...): [action]
  BB3 out: [action]
    l = 0: [action]
  BB4 out: [action]
    (this.right != null): [action]
  BB5 out: [action]
    r = this.right.runPreOrder(...): [action]
  BB6 out: [action]
    r = 0: [action]
  BB7 out: [action, reduce]
    return reduce.apply(...): [action]


PrintBothAction.apply
  BB0 out: []
    write(key): []
    writeln(): []
    write(value): []
    writeln(): []
    return 0: []
  BB1 out: []


PrintKeyAction.apply
  BB0 out: []
    write(key): []
    writeln(): []
    return 0: []
  BB1 out: []


PrintValueAction.apply
  BB0 out: []
    write(value): []
    writeln(): []
    return 0: []
  BB1 out: []


Random.Random
  BB0 out: []
    this.im = 134456: []
    this.ia = 8121: []
    this.ic = 28411: []
    this.jran = (seed % this.im): []
    this.next(...): []
  BB1 out: []


Random.next
  BB0 out: []
    this.jran = (((this.jran * this.ia) + this.ic) % this.im): []
    return this.jran: []
  BB1 out: []


ReductionLambda.apply
  BB0 out: []
    return 0: []
  BB1 out: []


Tree.Tree
  BB0 out: []
    this.cmpOp = cmpOp: []
    this.preparePrintLambdas(...): []
    this.prepareCountLambdas(...): []
    this.prepareDepthLambdas(...): []
  BB1 out: []


Tree.add
  BB0 out: [n]
    n = new Node(): []
    n.Node(...): [n]
    (this.root == null): [n]
  BB1 out: [n]
  BB2 out: [n]
    this.root = n: [n]
  BB3 out: [n]
    this.root.add(...): [n]
  BB4 out: [n]


Tree.getCount
  BB0 out: []
    (this.root != null): []
  BB1 out: []
  BB2 out: []
    return this.root.runPostOrder(...): []
  BB3 out: []
    return 0: []


Tree.getDepth
  BB0 out: []
    (this.root != null): []
  BB1 out: []
  BB2 out: []
    return this.root.runPostOrder(...): []
  BB3 out: []
    return 0: []


Tree.prepareCountLambdas
  BB0 out: []
    this.countAction = new CountAction(): []
    this.countReduce = new CountReduction(): []
  BB1 out: []


Tree.prepareDepthLambdas
  BB0 out: []
    this.depthAction = new DepthAction(): []
    this.depthReduce = new DepthReduction(): []
  BB1 out: []


Tree.preparePrintLambdas
  BB0 out: []
    this.printKeyAction = new PrintKeyAction(): []
    this.printValueAction = new PrintValueAction(): []
    this.printBothAction = new PrintBothAction(): []
    this.printReduce = new NothingReduction(): []
  BB1 out: []


Tree.printInOrder
  BB0 out: []
    (type == 1): []
  BB1 out: []
  BB2 out: []
    action = this.printKeyAction: []
  BB3 out: []
    (type == 2): []
  BB4 out: []
    action = this.printValueAction: []
  BB5 out: []
    action = this.printBothAction: []
  BB6 out: []
  BB7 out: []
    (this.root != null): []
  BB8 out: []
    this.root.runInOrder(...): []
  BB9 out: []
    nop: []
  BB10 out: []


Tree.printPostOrder
  BB0 out: []
    (type == 1): []
  BB1 out: []
  BB2 out: []
    action = this.printKeyAction: []
  BB3 out: []
    (type == 2): []
  BB4 out: []
    action = this.printValueAction: []
  BB5 out: []
    action = this.printBothAction: []
  BB6 out: []
  BB7 out: []
    (this.root != null): []
  BB8 out: []
    this.root.runPostOrder(...): []
  BB9 out: []
    nop: []
  BB10 out: []


Tree.printPreOrder
  BB0 out: []
    (type == 1): []
  BB1 out: []
  BB2 out: []
    action = this.printKeyAction: []
  BB3 out: []
    (type == 2): []
  BB4 out: []
    action = this.printValueAction: []
  BB5 out: []
    action = this.printBothAction: []
  BB6 out: []
  BB7 out: []
    (this.root != null): []
  BB8 out: []
    this.root.runPreOrder(...): []
  BB9 out: []
    nop: []
  BB10 out: []



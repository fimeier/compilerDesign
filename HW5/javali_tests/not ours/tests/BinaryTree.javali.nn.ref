BinaryTree.get
  BB0 out: []
    (i == this.key): []
  BB1 out: []
  BB2 out: []
    return this.value: []
  BB3 out: []
    nop: []
  BB4 out: []
    ((this.left == null) && (this.right == null)): []
  BB5 out: []
    return this.value: []
  BB6 out: []
    nop: []
  BB7 out: []
    ((this.left == null) && (i < this.key)): []
  BB8 out: []
    return this.value: []
  BB9 out: []
    nop: []
  BB10 out: []
    ((this.right == null) && (i > this.key)): []
  BB11 out: []
    return this.value: []
  BB12 out: []
    nop: []
  BB13 out: []
    (i < this.key): []
  BB14 out: []
    return this.left.get(...): []
  BB15 out: []
    nop: []
  BB16 out: []
    (i > this.key): []
  BB17 out: []
    return this.right.get(...): []
  BB18 out: []
    nop: []
  BB19 out: []
    return null: []


BinaryTree.insert
  BB0 out: []
    (this.value == null): []
  BB1 out: []
  BB2 out: []
    this.value = obj: []
    this.key = w: []
  BB3 out: []
    (w < this.key): []
  BB4 out: []
    (this.left == null): []
  BB5 out: []
    (this.right == null): []
  BB6 out: []
    this.left = new BinaryTree(): []
  BB7 out: []
    nop: []
  BB8 out: []
    this.left.insert(...): []
  BB9 out: []
    this.right = new BinaryTree(): []
  BB10 out: []
    nop: []
  BB11 out: []
    this.right.insert(...): []
  BB12 out: []
  BB13 out: []


BinaryTree.printKeys
  BB0 out: []
    (this.left != null): []
  BB1 out: []
  BB2 out: []
    this.left.printKeys(...): []
  BB3 out: []
    nop: []
  BB4 out: []
    write(this.key): []
    (this.right != null): []
  BB5 out: []
    this.right.printKeys(...): []
  BB6 out: []
    nop: []
  BB7 out: []


BinaryTreeFactory.fromArray
  BB0 out: [bn]
    bn = new BinaryTree(): []
  BB1 out: [bn]
  BB2 out: [bn]
    (i < size): [bn]
  BB3 out: [bn, values]
    bn.insert(...): [bn]
    i = (i + 1): [bn, values]
  BB4 out: [bn]
    return bn: [bn]


BinaryTreeFactory.newTree
  BB0 out: [bn]
    bn = new BinaryTree(): []
    return bn: [bn]
  BB1 out: [bn]


Cell.print
  BB0 out: []
    write(this.k): []
  BB1 out: []


DelayedCell.print
  BB0 out: [c]
    write(this.k): []
    c = (Cell)(this): []
    this.k = c.k: [c]
  BB1 out: [c]


Main.cellTest
  BB0 out: [factory, mixedCells, normalCells]
    this.checkpoint(...): []
    factory = new BinaryTreeFactory(): []
    normalCells = new Object[][size]: [factory]
    mixedCells = new Object[][size]: [factory, normalCells]
  BB1 out: [factory, mixedCells, normalCells, tree]
  BB2 out: [factory, mixedCells, normalCells]
    (i < size): [factory, mixedCells, normalCells]
  BB3 out: [c, factory, input, mixedCells, normalCells]
    c = new Cell(): [factory, mixedCells, normalCells]
    c.k = input[i]: [c, factory, mixedCells, normalCells]
    normalCells[i] = (Object)(c): [c, factory, input, mixedCells, normalCells]
    i = (i + 1): [c, factory, input, mixedCells, normalCells]
  BB4 out: [factory, mixedCells, normalCells, tree]
    this.checkpoint(...): [factory, mixedCells, normalCells]
    tree = factory.fromArray(...): [factory, mixedCells, normalCells]
    tree.printKeys(...): [factory, mixedCells, normalCells]
    i = -(2): [factory, mixedCells, normalCells, tree]
  BB5 out: [factory, mixedCells, normalCells, tree]
    (i < (size + 2)): [factory, mixedCells, normalCells, tree]
  BB6 out: [c, factory, mixedCells, normalCells, tree]
    write(c.k): [factory, mixedCells, normalCells, tree]
    i = (i + 1): [c, factory, mixedCells, normalCells, tree]
  BB7 out: [factory, mixedCells, normalCells, tree]
    writeln(): [factory, mixedCells, normalCells, tree]
    this.checkpoint(...): [factory, mixedCells, normalCells, tree]
    i = 0: [factory, mixedCells, normalCells, tree]


Main.checkpoint
  BB0 out: []
    writeln(): []
    write(this.t): []
    writeln(): []
    this.t = (this.t + 1): []
  BB1 out: []


Main.main
  BB0 out: [input]
    this.checkpoint(...): []
    size = read(): []
    input = new int[][size]: []
    this.checkpoint(...): [input]
    p = read(): [input]
  BB1 out: [input]
  BB2 out: [input]
    ((p != -(1)) && (i < size)): [input]
  BB3 out: [input]
    (p > 0): [input]
  BB4 out: [input]
    this.checkpoint(...): [input]
    this.sortedPrint(...): [input]
    writeln(): [input]
    this.checkpoint(...): [input]
    this.cellTest(...): [input]
  BB5 out: [input]
    input[i] = p: [input]
  BB6 out: [input]
    nop: [input]
  BB7 out: [input]
    p = read(): [input]
    i = (i + 1): [input]


Main.sortedPrint
  BB0 out: [a, factory]
    factory = new BinaryTreeFactory(): []
    tree = factory.newTree(...): [factory]
    a = new Object(): [factory]
  BB1 out: [a, factory, tree]
  BB2 out: [a, factory]
    (i < size): [a, factory]
  BB3 out: [a, factory, input, tree]
    tree.insert(...): [a, factory]
    i = (i + 1): [a, factory, input, tree]
  BB4 out: [a, factory, tree]
    tree.printKeys(...): [a, factory]


NegativeCell.print
  BB0 out: []
    write(-(this.k)): []
  BB1 out: []


ReadToClearCell.print
  BB0 out: []
    write(this.k): []
    this.k = 0: []
  BB1 out: []



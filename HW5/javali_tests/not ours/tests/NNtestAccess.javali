/* compare effects of accessing uninitialized objects on NNA
   2017-05-23 Pirmin Schmid
*/

class Test {
    int i;

    int test() {
        return i;
    }
}

class Main {

    void main() {
        Test fieldAccessLHS, fieldAccessRHS, methodAccessLHS, methodAccessRHS;
        int[] arrayAccessLHS, arrayAccessRHS;
        int i;

        // note: none of the objects (Test class and int array) are created

        fieldAccessLHS.i = 3;
        methodAccessLHS.test();
        arrayAccessLHS[0] = 7;

        write(1); writeln();


        i = fieldAccessRHS.i;
        i = methodAccessRHS.test();
        i = arrayAccessRHS[0];

        write(2); writeln();

        // here, reference solution accepts these as guaranteed non-null:
        // [fieldAccessLHS, fieldAccessRHS, methodAccessLHS, methodAccessRHS]
        //
        // however, arrayAccessLHS and arrayAccessRHS should be accepted here as well.
        // btw: for array access, one could even assure that index was in range for the array.
    }
}
